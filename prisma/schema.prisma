generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TermsOfUse {
  id        Int     @id @default(autoincrement())
  createdAt BigInt  @default(0)
  isDeleted Boolean @default(false)
  isRequire Boolean
  version   Int
  title     String
  body      String

  userTermsOfUse UserTermsOfUse[]
}

model UserTermsOfUse {
  id           Int     @id @default(autoincrement())
  createdAt    BigInt  @default(0)
  isDeleted    Boolean @default(false)
  userId       Int
  termsOfUseId Int

  user       User       @relation(fields: [userId], references: [id])
  termsOfUse TermsOfUse @relation(fields: [termsOfUseId], references: [id])
}

model User {
  id         Int     @id @default(autoincrement())
  createdAt  BigInt  @default(0)
  modifiedAt BigInt  @default(0)
  isDeleted  Boolean @default(false)
  isBlocked  Boolean @default(false)
  loginId    String  @unique
  password   String
  fullName   String
  birthDate  BigInt
  gender     String

  oAuth          OAuth?
  userDevice     UserDevice[]
  contactGroup   ContactGroup[]
  callLog        CallLog[]
  userTermsOfUse UserTermsOfUse[]
  contact        Contact[]
}

model OAuth {
  id             Int     @id @default(autoincrement())
  createdAt      BigInt  @default(0)
  isDeleted      Boolean @default(false)
  userId         Int     @unique
  provider       String
  providerUserId String
  scope          String?

  user User @relation(fields: [userId], references: [id])
}

model UserDevice {
  id           Int     @id @default(autoincrement())
  createdAt    BigInt  @default(0)
  isDeleted    Boolean @default(false)
  userId       Int
  deviceId     String
  osType       String
  phoneNumber  String
  refreshToken String?

  user                User                 @relation(fields: [userId], references: [id])
  notificationSetting NotificationSetting?

  @@unique([userId, deviceId])
}

model ContactGroup {
  id         Int    @id @default(autoincrement())
  createdAt  BigInt @default(0)
  modifiedAt BigInt @default(0)
  userId     Int
  name       String
  color      String

  user User @relation(fields: [userId], references: [id])

  contactGroupMapping ContactGroupMapping[]

  @@unique([userId, name])
}

model ContactGroupMapping {
  id             Int    @id @default(autoincrement())
  createdAt      BigInt @default(0)
  modifiedAt     BigInt @default(0)
  contactId      Int
  contactGroupId Int

  contact      Contact      @relation(fields: [contactId], references: [id])
  contactGroup ContactGroup @relation(fields: [contactGroupId], references: [id])

  @@unique([contactId, contactGroupId])
}

model Contact {
  id          Int    @id @default(autoincrement())
  createdAt   BigInt @default(0)
  modifiedAt  BigInt @default(0)
  userId      Int
  name        String
  phoneNumber String

  user User @relation(fields: [userId], references: [id])

  contactNote         ContactNote?
  contactEvent        ContactEvent[]
  contactGroupMapping ContactGroupMapping[]
  contactAddress      ContactAddress[]
  contactVehicle      ContactVehicle[]
  contactCarNumber    ContactCarNumber[]
  subContact          SubContact[]
}

model SubContact {
  id          Int    @id @default(autoincrement())
  createdAt   BigInt @default(0)
  modifiedAt  BigInt @default(0)
  contactId   Int
  phoneNumber String

  contact Contact @relation(fields: [contactId], references: [id])
}

model ContactAddress {
  id         Int    @id @default(autoincrement())
  createdAt  BigInt @default(0)
  modifiedAt BigInt @default(0)
  contactId  Int
  body       String

  contact Contact @relation(fields: [contactId], references: [id])
}

model ContactVehicle {
  id         Int    @id @default(autoincrement())
  createdAt  BigInt @default(0)
  modifiedAt BigInt @default(0)
  contactId  Int
  body       String

  contact Contact @relation(fields: [contactId], references: [id])
}

model ContactCarNumber {
  id         Int    @id @default(autoincrement())
  createdAt  BigInt @default(0)
  modifiedAt BigInt @default(0)
  contactId  Int
  body       String

  contact Contact @relation(fields: [contactId], references: [id])
}

model ContactNote {
  id         Int    @id @default(autoincrement())
  createdAt  BigInt @default(0)
  modifiedAt BigInt @default(0)
  contactId  Int    @unique
  body       String

  contact Contact @relation(fields: [contactId], references: [id])
}

model ContactEvent {
  id        Int    @id @default(autoincrement())
  createdAt BigInt @default(0)
  contactId Int    @unique
  eventDate BigInt
  type      String
  body      String

  contact Contact @relation(fields: [contactId], references: [id])
}

model CallLog {
  id          Int    @id @default(autoincrement())
  createdAt   BigInt @default(0)
  modifiedAt  BigInt @default(0)
  userId      Int
  phoneNumber String
  type        String
  date        BigInt
  callDate    Int

  user User @relation(fields: [userId], references: [id])
}

model NotificationSetting {
  id                     Int     @id @default(autoincrement())
  createdAt              BigInt  @default(0)
  modifiedAt             BigInt  @default(0)
  userDeviceId           Int     @unique
  isAppNotificationAlert Boolean @default(true) // 앱 자체 알림
  isMissedCallAlert      Boolean @default(true) // 부재중 전화 알림
  isIncomingCallAlert    Boolean @default(true) // 수신 전화 알림
  isMarketingAlert       Boolean @default(true) // 마케팅 광고 알림

  userDevice UserDevice @relation(fields: [userDeviceId], references: [id])
}

model UserContactLog {
  id           Int    @id @default(autoincrement())
  createdAt    BigInt @default(0)
  userId       Int
  userDeviceId Int
  type         String
  data         Json
}
